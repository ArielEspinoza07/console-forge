#!/usr/bin/env php
<?php

declare(strict_types=1);

use ConsoleForge\Console\Commands\InitDirCommand;
use ConsoleForge\Console\Commands\InitFileCommand;
use ConsoleForge\Contracts\CommandDescriptorInterface;
use ConsoleForge\Descriptors\CommandDescriptor;
use ConsoleForge\Descriptors\OptDescriptor;
use ConsoleForge\InMemoryCommandRegistry;
use ConsoleForge\SymfonyCommandMapper;
use Symfony\Component\Console\Application;

require __DIR__ . '/../vendor/autoload.php';

// Search if nunomaduro/collision is installed and register it
// for pretty error messages
if (class_exists(\NunoMaduro\Collision\Provider::class)) {
    (new \NunoMaduro\Collision\Provider())->register();
}

$registry = new InMemoryCommandRegistry();

// Built-in commands
$registry->add(
        descriptor: new CommandDescriptor(
                name: 'init:file',
                description: 'Create a single configuration file config/console-forge.php',
                opts: [
                        OptDescriptor::flag('force', 'f', 'Overwrites if already exists'),
                ],
                handler: InitFileCommand::class,
        ),
)->add(
        descriptor: new CommandDescriptor(
                name: 'init:dir',
                description: 'Create the config/console-forge directory for multiple files',
                opts: [
                        OptDescriptor::flag('force', 'f', 'Overwrites if already exists'),
                ],
                handler: InitDirCommand::class
        ),
);

// Helpers
/**
 * @return iterable<CommandDescriptorInterface>
 */
function normalizeDescriptors(mixed $ret): iterable
{
    if ($ret instanceof Traversable) {
        return $ret;
    }
    if ($ret instanceof CommandDescriptorInterface) {
        return [$ret];
    }
    if (is_array($ret)) {
        // Supports ['commands' => [...]] or direct list
        if (array_key_exists('commands', $ret) && is_iterable($ret['commands'])) {
            return $ret['commands'];
        }
        return $ret; // we assume direct list
    }

    throw new LogicException('Config file must return iterable of descriptors, array with "commands", or a single descriptor.');
}

function loadFileIntoRegistry(string $path, InMemoryCommandRegistry $registry): void
{
    /** @var mixed $ret */
    $ret = require $path;
    foreach (normalizeDescriptors($ret) as $cmd) {
        if (!$cmd instanceof CommandDescriptorInterface) {
            throw new LogicException(sprintf('Invalid command descriptor in %s', $path));
        }
        $registry->add($cmd);
    }
}

// Single file
$single = getcwd() . '/config/console-forge.php';
if (is_file($single)) {
    loadFileIntoRegistry($single, $registry);
}

// Directory
$dir = getcwd() . '/config/console-forge';
if (is_dir($dir)) {
    foreach (glob($dir . '/*.php') ?: [] as $file) {
        loadFileIntoRegistry($file, $registry);
    }
}

// Dynamic version if available
$version = class_exists(\Composer\InstalledVersions::class)
        ? (\Composer\InstalledVersions::getPrettyVersion('arielespinoza07/console-forge') ?? 'dev')
        : 'dev';

$app = new Application('ConsoleForge', $version);
$mapper = new SymfonyCommandMapper();
$mapper->attach($app, $registry->all());

$app->run();
